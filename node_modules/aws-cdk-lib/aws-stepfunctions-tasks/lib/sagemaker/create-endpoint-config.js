"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.SageMakerCreateEndpointConfig=void 0;var jsiiDeprecationWarnings=()=>{var tmp=require("../../../.warnings.jsii.js");return jsiiDeprecationWarnings=()=>tmp,tmp};const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti");var iam=()=>{var tmp=require("../../../aws-iam");return iam=()=>tmp,tmp},sfn=()=>{var tmp=require("../../../aws-stepfunctions");return sfn=()=>tmp,tmp},cdk=()=>{var tmp=require("../../../core");return cdk=()=>tmp,tmp},task_utils_1=()=>{var tmp=require("../private/task-utils");return task_utils_1=()=>tmp,tmp};class SageMakerCreateEndpointConfig extends sfn().TaskStateBase{static jsonPath(scope,id,props){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_stepfunctions_tasks_SageMakerCreateEndpointConfigJsonPathProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.jsonPath),error}return new SageMakerCreateEndpointConfig(scope,id,props)}static jsonata(scope,id,props){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_stepfunctions_tasks_SageMakerCreateEndpointConfigJsonataProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.jsonata),error}return new SageMakerCreateEndpointConfig(scope,id,{...props,queryLanguage:sfn().QueryLanguage.JSONATA})}constructor(scope,id,props){super(scope,id,props),this.props=props;try{jsiiDeprecationWarnings().aws_cdk_lib_aws_stepfunctions_tasks_SageMakerCreateEndpointConfigProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,SageMakerCreateEndpointConfig),error}this.integrationPattern=props.integrationPattern||sfn().IntegrationPattern.REQUEST_RESPONSE,(0,task_utils_1().validatePatternSupported)(this.integrationPattern,SageMakerCreateEndpointConfig.SUPPORTED_INTEGRATION_PATTERNS),this.validateProductionVariants(),this.taskPolicies=this.makePolicyStatements()}_renderTask(topLevelQueryLanguage){const queryLanguage=sfn()._getActualQueryLanguage(topLevelQueryLanguage,this.props.queryLanguage);return{Resource:(0,task_utils_1().integrationResourceArn)("sagemaker","createEndpointConfig",this.integrationPattern),...this._renderParametersOrArguments(this.renderParameters(),queryLanguage)}}renderParameters(){return{EndpointConfigName:this.props.endpointConfigName,Tags:this.props.tags?.value,KmsKeyId:this.props.kmsKey?.keyId,ProductionVariants:this.props.productionVariants.map(variant=>({InitialInstanceCount:variant.initialInstanceCount?variant.initialInstanceCount:1,InstanceType:(0,task_utils_1().isJsonPathOrJsonataExpression)(variant.instanceType.toString())?variant.instanceType.toString():`ml.${variant.instanceType}`,ModelName:variant.modelName,VariantName:variant.variantName,AcceleratorType:variant.acceleratorType,InitialVariantWeight:variant.initialVariantWeight}))}}makePolicyStatements(){const stack=cdk().Stack.of(this);return[new(iam()).PolicyStatement({actions:["sagemaker:CreateEndpointConfig"],resources:[stack.formatArn({service:"sagemaker",resource:"endpoint-config",resourceName:(0,task_utils_1().isJsonPathOrJsonataExpression)(this.props.endpointConfigName)?"*":`${this.props.endpointConfigName.toLowerCase()}`})]}),new(iam()).PolicyStatement({actions:["sagemaker:ListTags"],resources:["*"]})]}validateProductionVariants(){if(this.props.productionVariants.length<1||this.props.productionVariants.length>10)throw new Error("Must specify from 1 to 10 production variants per endpoint configuration");this.props.productionVariants.forEach(variant=>{if(variant.initialInstanceCount&&variant.initialInstanceCount<1)throw new Error("Must define at least one instance");if(variant.initialVariantWeight&&variant.initialVariantWeight<=0)throw new Error("InitialVariantWeight has minimum value of 0")})}}exports.SageMakerCreateEndpointConfig=SageMakerCreateEndpointConfig,_a=JSII_RTTI_SYMBOL_1,SageMakerCreateEndpointConfig[_a]={fqn:"aws-cdk-lib.aws_stepfunctions_tasks.SageMakerCreateEndpointConfig",version:"2.179.0"},SageMakerCreateEndpointConfig.SUPPORTED_INTEGRATION_PATTERNS=[sfn().IntegrationPattern.REQUEST_RESPONSE];
