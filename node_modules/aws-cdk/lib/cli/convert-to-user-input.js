"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertYargsToUserInput = convertYargsToUserInput;
exports.convertConfigToUserInput = convertConfigToUserInput;
// @ts-ignore TS6133
function convertYargsToUserInput(args) {
    const globalOptions = {
        app: args.app,
        build: args.build,
        context: args.context,
        plugin: args.plugin,
        trace: args.trace,
        strict: args.strict,
        lookups: args.lookups,
        ignoreErrors: args.ignoreErrors,
        json: args.json,
        verbose: args.verbose,
        debug: args.debug,
        profile: args.profile,
        proxy: args.proxy,
        caBundlePath: args.caBundlePath,
        ec2creds: args.ec2creds,
        versionReporting: args.versionReporting,
        pathMetadata: args.pathMetadata,
        assetMetadata: args.assetMetadata,
        roleArn: args.roleArn,
        staging: args.staging,
        output: args.output,
        notices: args.notices,
        noColor: args.noColor,
        ci: args.ci,
        unstable: args.unstable,
    };
    let commandOptions;
    switch (args._[0]) {
        case 'list':
        case 'ls':
            commandOptions = {
                long: args.long,
                showDependencies: args.showDependencies,
                STACKS: args.STACKS,
            };
            break;
        case 'synth':
        case 'synthesize':
            commandOptions = {
                exclusively: args.exclusively,
                validation: args.validation,
                quiet: args.quiet,
                STACKS: args.STACKS,
            };
            break;
        case 'bootstrap':
            commandOptions = {
                bootstrapBucketName: args.bootstrapBucketName,
                bootstrapKmsKeyId: args.bootstrapKmsKeyId,
                examplePermissionsBoundary: args.examplePermissionsBoundary,
                customPermissionsBoundary: args.customPermissionsBoundary,
                bootstrapCustomerKey: args.bootstrapCustomerKey,
                qualifier: args.qualifier,
                publicAccessBlockConfiguration: args.publicAccessBlockConfiguration,
                tags: args.tags,
                execute: args.execute,
                trust: args.trust,
                trustForLookup: args.trustForLookup,
                untrust: args.untrust,
                cloudformationExecutionPolicies: args.cloudformationExecutionPolicies,
                force: args.force,
                terminationProtection: args.terminationProtection,
                showTemplate: args.showTemplate,
                toolkitStackName: args.toolkitStackName,
                template: args.template,
                previousParameters: args.previousParameters,
                ENVIRONMENTS: args.ENVIRONMENTS,
            };
            break;
        case 'gc':
            commandOptions = {
                action: args.action,
                type: args.type,
                rollbackBufferDays: args.rollbackBufferDays,
                createdBufferDays: args.createdBufferDays,
                confirm: args.confirm,
                bootstrapStackName: args.bootstrapStackName,
                ENVIRONMENTS: args.ENVIRONMENTS,
            };
            break;
        case 'deploy':
            commandOptions = {
                all: args.all,
                buildExclude: args.buildExclude,
                exclusively: args.exclusively,
                requireApproval: args.requireApproval,
                notificationArns: args.notificationArns,
                tags: args.tags,
                execute: args.execute,
                changeSetName: args.changeSetName,
                method: args.method,
                importExistingResources: args.importExistingResources,
                force: args.force,
                parameters: args.parameters,
                outputsFile: args.outputsFile,
                previousParameters: args.previousParameters,
                toolkitStackName: args.toolkitStackName,
                progress: args.progress,
                rollback: args.rollback,
                hotswap: args.hotswap,
                hotswapFallback: args.hotswapFallback,
                watch: args.watch,
                logs: args.logs,
                concurrency: args.concurrency,
                assetParallelism: args.assetParallelism,
                assetPrebuild: args.assetPrebuild,
                ignoreNoStacks: args.ignoreNoStacks,
                STACKS: args.STACKS,
            };
            break;
        case 'rollback':
            commandOptions = {
                all: args.all,
                toolkitStackName: args.toolkitStackName,
                force: args.force,
                validateBootstrapVersion: args.validateBootstrapVersion,
                orphan: args.orphan,
                STACKS: args.STACKS,
            };
            break;
        case 'import':
            commandOptions = {
                execute: args.execute,
                changeSetName: args.changeSetName,
                toolkitStackName: args.toolkitStackName,
                rollback: args.rollback,
                force: args.force,
                recordResourceMapping: args.recordResourceMapping,
                resourceMapping: args.resourceMapping,
                STACK: args.STACK,
            };
            break;
        case 'watch':
            commandOptions = {
                buildExclude: args.buildExclude,
                exclusively: args.exclusively,
                changeSetName: args.changeSetName,
                force: args.force,
                toolkitStackName: args.toolkitStackName,
                progress: args.progress,
                rollback: args.rollback,
                hotswap: args.hotswap,
                hotswapFallback: args.hotswapFallback,
                logs: args.logs,
                concurrency: args.concurrency,
                STACKS: args.STACKS,
            };
            break;
        case 'destroy':
            commandOptions = {
                all: args.all,
                exclusively: args.exclusively,
                force: args.force,
                STACKS: args.STACKS,
            };
            break;
        case 'diff':
            commandOptions = {
                exclusively: args.exclusively,
                contextLines: args.contextLines,
                template: args.template,
                strict: args.strict,
                securityOnly: args.securityOnly,
                fail: args.fail,
                processed: args.processed,
                quiet: args.quiet,
                changeSet: args.changeSet,
                STACKS: args.STACKS,
            };
            break;
        case 'metadata':
            commandOptions = {
                STACK: args.STACK,
            };
            break;
        case 'acknowledge':
        case 'ack':
            commandOptions = {
                ID: args.ID,
            };
            break;
        case 'notices':
            commandOptions = {
                unacknowledged: args.unacknowledged,
            };
            break;
        case 'init':
            commandOptions = {
                language: args.language,
                list: args.list,
                generateOnly: args.generateOnly,
                TEMPLATE: args.TEMPLATE,
            };
            break;
        case 'migrate':
            commandOptions = {
                stackName: args.stackName,
                language: args.language,
                account: args.account,
                region: args.region,
                fromPath: args.fromPath,
                fromStack: args.fromStack,
                outputPath: args.outputPath,
                fromScan: args.fromScan,
                filter: args.filter,
                compress: args.compress,
            };
            break;
        case 'context':
            commandOptions = {
                reset: args.reset,
                force: args.force,
                clear: args.clear,
            };
            break;
        case 'docs':
        case 'doc':
            commandOptions = {
                browser: args.browser,
            };
            break;
        case 'doctor':
            commandOptions = {};
            break;
    }
    const userInput = {
        command: args._[0],
        globalOptions,
        [args._[0]]: commandOptions,
    };
    return userInput;
}
// @ts-ignore TS6133
function convertConfigToUserInput(config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83;
    const globalOptions = {
        app: config.app,
        build: config.build,
        context: config.context,
        plugin: config.plugin,
        trace: config.trace,
        strict: config.strict,
        lookups: config.lookups,
        ignoreErrors: config.ignoreErrors,
        json: config.json,
        verbose: config.verbose,
        debug: config.debug,
        profile: config.profile,
        proxy: config.proxy,
        caBundlePath: config.caBundlePath,
        ec2creds: config.ec2creds,
        versionReporting: config.versionReporting,
        pathMetadata: config.pathMetadata,
        assetMetadata: config.assetMetadata,
        roleArn: config.roleArn,
        staging: config.staging,
        output: config.output,
        notices: config.notices,
        noColor: config.noColor,
        ci: config.ci,
        unstable: config.unstable,
    };
    const listOptions = {
        long: (_a = config.list) === null || _a === void 0 ? void 0 : _a.long,
        showDependencies: (_b = config.list) === null || _b === void 0 ? void 0 : _b.showDependencies,
    };
    const synthOptions = {
        exclusively: (_c = config.synth) === null || _c === void 0 ? void 0 : _c.exclusively,
        validation: (_d = config.synth) === null || _d === void 0 ? void 0 : _d.validation,
        quiet: (_e = config.synth) === null || _e === void 0 ? void 0 : _e.quiet,
    };
    const bootstrapOptions = {
        bootstrapBucketName: (_f = config.bootstrap) === null || _f === void 0 ? void 0 : _f.bootstrapBucketName,
        bootstrapKmsKeyId: (_g = config.bootstrap) === null || _g === void 0 ? void 0 : _g.bootstrapKmsKeyId,
        examplePermissionsBoundary: (_h = config.bootstrap) === null || _h === void 0 ? void 0 : _h.examplePermissionsBoundary,
        customPermissionsBoundary: (_j = config.bootstrap) === null || _j === void 0 ? void 0 : _j.customPermissionsBoundary,
        bootstrapCustomerKey: (_k = config.bootstrap) === null || _k === void 0 ? void 0 : _k.bootstrapCustomerKey,
        qualifier: (_l = config.bootstrap) === null || _l === void 0 ? void 0 : _l.qualifier,
        publicAccessBlockConfiguration: (_m = config.bootstrap) === null || _m === void 0 ? void 0 : _m.publicAccessBlockConfiguration,
        tags: (_o = config.bootstrap) === null || _o === void 0 ? void 0 : _o.tags,
        execute: (_p = config.bootstrap) === null || _p === void 0 ? void 0 : _p.execute,
        trust: (_q = config.bootstrap) === null || _q === void 0 ? void 0 : _q.trust,
        trustForLookup: (_r = config.bootstrap) === null || _r === void 0 ? void 0 : _r.trustForLookup,
        untrust: (_s = config.bootstrap) === null || _s === void 0 ? void 0 : _s.untrust,
        cloudformationExecutionPolicies: (_t = config.bootstrap) === null || _t === void 0 ? void 0 : _t.cloudformationExecutionPolicies,
        force: (_u = config.bootstrap) === null || _u === void 0 ? void 0 : _u.force,
        terminationProtection: (_v = config.bootstrap) === null || _v === void 0 ? void 0 : _v.terminationProtection,
        showTemplate: (_w = config.bootstrap) === null || _w === void 0 ? void 0 : _w.showTemplate,
        toolkitStackName: (_x = config.bootstrap) === null || _x === void 0 ? void 0 : _x.toolkitStackName,
        template: (_y = config.bootstrap) === null || _y === void 0 ? void 0 : _y.template,
        previousParameters: (_z = config.bootstrap) === null || _z === void 0 ? void 0 : _z.previousParameters,
    };
    const gcOptions = {
        action: (_0 = config.gc) === null || _0 === void 0 ? void 0 : _0.action,
        type: (_1 = config.gc) === null || _1 === void 0 ? void 0 : _1.type,
        rollbackBufferDays: (_2 = config.gc) === null || _2 === void 0 ? void 0 : _2.rollbackBufferDays,
        createdBufferDays: (_3 = config.gc) === null || _3 === void 0 ? void 0 : _3.createdBufferDays,
        confirm: (_4 = config.gc) === null || _4 === void 0 ? void 0 : _4.confirm,
        bootstrapStackName: (_5 = config.gc) === null || _5 === void 0 ? void 0 : _5.bootstrapStackName,
    };
    const deployOptions = {
        all: (_6 = config.deploy) === null || _6 === void 0 ? void 0 : _6.all,
        buildExclude: (_7 = config.deploy) === null || _7 === void 0 ? void 0 : _7.buildExclude,
        exclusively: (_8 = config.deploy) === null || _8 === void 0 ? void 0 : _8.exclusively,
        requireApproval: (_9 = config.deploy) === null || _9 === void 0 ? void 0 : _9.requireApproval,
        notificationArns: (_10 = config.deploy) === null || _10 === void 0 ? void 0 : _10.notificationArns,
        tags: (_11 = config.deploy) === null || _11 === void 0 ? void 0 : _11.tags,
        execute: (_12 = config.deploy) === null || _12 === void 0 ? void 0 : _12.execute,
        changeSetName: (_13 = config.deploy) === null || _13 === void 0 ? void 0 : _13.changeSetName,
        method: (_14 = config.deploy) === null || _14 === void 0 ? void 0 : _14.method,
        importExistingResources: (_15 = config.deploy) === null || _15 === void 0 ? void 0 : _15.importExistingResources,
        force: (_16 = config.deploy) === null || _16 === void 0 ? void 0 : _16.force,
        parameters: (_17 = config.deploy) === null || _17 === void 0 ? void 0 : _17.parameters,
        outputsFile: (_18 = config.deploy) === null || _18 === void 0 ? void 0 : _18.outputsFile,
        previousParameters: (_19 = config.deploy) === null || _19 === void 0 ? void 0 : _19.previousParameters,
        toolkitStackName: (_20 = config.deploy) === null || _20 === void 0 ? void 0 : _20.toolkitStackName,
        progress: (_21 = config.deploy) === null || _21 === void 0 ? void 0 : _21.progress,
        rollback: (_22 = config.deploy) === null || _22 === void 0 ? void 0 : _22.rollback,
        hotswap: (_23 = config.deploy) === null || _23 === void 0 ? void 0 : _23.hotswap,
        hotswapFallback: (_24 = config.deploy) === null || _24 === void 0 ? void 0 : _24.hotswapFallback,
        watch: (_25 = config.deploy) === null || _25 === void 0 ? void 0 : _25.watch,
        logs: (_26 = config.deploy) === null || _26 === void 0 ? void 0 : _26.logs,
        concurrency: (_27 = config.deploy) === null || _27 === void 0 ? void 0 : _27.concurrency,
        assetParallelism: (_28 = config.deploy) === null || _28 === void 0 ? void 0 : _28.assetParallelism,
        assetPrebuild: (_29 = config.deploy) === null || _29 === void 0 ? void 0 : _29.assetPrebuild,
        ignoreNoStacks: (_30 = config.deploy) === null || _30 === void 0 ? void 0 : _30.ignoreNoStacks,
    };
    const rollbackOptions = {
        all: (_31 = config.rollback) === null || _31 === void 0 ? void 0 : _31.all,
        toolkitStackName: (_32 = config.rollback) === null || _32 === void 0 ? void 0 : _32.toolkitStackName,
        force: (_33 = config.rollback) === null || _33 === void 0 ? void 0 : _33.force,
        validateBootstrapVersion: (_34 = config.rollback) === null || _34 === void 0 ? void 0 : _34.validateBootstrapVersion,
        orphan: (_35 = config.rollback) === null || _35 === void 0 ? void 0 : _35.orphan,
    };
    const importOptions = {
        execute: (_36 = config.import) === null || _36 === void 0 ? void 0 : _36.execute,
        changeSetName: (_37 = config.import) === null || _37 === void 0 ? void 0 : _37.changeSetName,
        toolkitStackName: (_38 = config.import) === null || _38 === void 0 ? void 0 : _38.toolkitStackName,
        rollback: (_39 = config.import) === null || _39 === void 0 ? void 0 : _39.rollback,
        force: (_40 = config.import) === null || _40 === void 0 ? void 0 : _40.force,
        recordResourceMapping: (_41 = config.import) === null || _41 === void 0 ? void 0 : _41.recordResourceMapping,
        resourceMapping: (_42 = config.import) === null || _42 === void 0 ? void 0 : _42.resourceMapping,
    };
    const watchOptions = {
        buildExclude: (_43 = config.watch) === null || _43 === void 0 ? void 0 : _43.buildExclude,
        exclusively: (_44 = config.watch) === null || _44 === void 0 ? void 0 : _44.exclusively,
        changeSetName: (_45 = config.watch) === null || _45 === void 0 ? void 0 : _45.changeSetName,
        force: (_46 = config.watch) === null || _46 === void 0 ? void 0 : _46.force,
        toolkitStackName: (_47 = config.watch) === null || _47 === void 0 ? void 0 : _47.toolkitStackName,
        progress: (_48 = config.watch) === null || _48 === void 0 ? void 0 : _48.progress,
        rollback: (_49 = config.watch) === null || _49 === void 0 ? void 0 : _49.rollback,
        hotswap: (_50 = config.watch) === null || _50 === void 0 ? void 0 : _50.hotswap,
        hotswapFallback: (_51 = config.watch) === null || _51 === void 0 ? void 0 : _51.hotswapFallback,
        logs: (_52 = config.watch) === null || _52 === void 0 ? void 0 : _52.logs,
        concurrency: (_53 = config.watch) === null || _53 === void 0 ? void 0 : _53.concurrency,
    };
    const destroyOptions = {
        all: (_54 = config.destroy) === null || _54 === void 0 ? void 0 : _54.all,
        exclusively: (_55 = config.destroy) === null || _55 === void 0 ? void 0 : _55.exclusively,
        force: (_56 = config.destroy) === null || _56 === void 0 ? void 0 : _56.force,
    };
    const diffOptions = {
        exclusively: (_57 = config.diff) === null || _57 === void 0 ? void 0 : _57.exclusively,
        contextLines: (_58 = config.diff) === null || _58 === void 0 ? void 0 : _58.contextLines,
        template: (_59 = config.diff) === null || _59 === void 0 ? void 0 : _59.template,
        strict: (_60 = config.diff) === null || _60 === void 0 ? void 0 : _60.strict,
        securityOnly: (_61 = config.diff) === null || _61 === void 0 ? void 0 : _61.securityOnly,
        fail: (_62 = config.diff) === null || _62 === void 0 ? void 0 : _62.fail,
        processed: (_63 = config.diff) === null || _63 === void 0 ? void 0 : _63.processed,
        quiet: (_64 = config.diff) === null || _64 === void 0 ? void 0 : _64.quiet,
        changeSet: (_65 = config.diff) === null || _65 === void 0 ? void 0 : _65.changeSet,
    };
    const metadataOptions = {};
    const acknowledgeOptions = {};
    const noticesOptions = {
        unacknowledged: (_66 = config.notices) === null || _66 === void 0 ? void 0 : _66.unacknowledged,
    };
    const initOptions = {
        language: (_67 = config.init) === null || _67 === void 0 ? void 0 : _67.language,
        list: (_68 = config.init) === null || _68 === void 0 ? void 0 : _68.list,
        generateOnly: (_69 = config.init) === null || _69 === void 0 ? void 0 : _69.generateOnly,
    };
    const migrateOptions = {
        stackName: (_70 = config.migrate) === null || _70 === void 0 ? void 0 : _70.stackName,
        language: (_71 = config.migrate) === null || _71 === void 0 ? void 0 : _71.language,
        account: (_72 = config.migrate) === null || _72 === void 0 ? void 0 : _72.account,
        region: (_73 = config.migrate) === null || _73 === void 0 ? void 0 : _73.region,
        fromPath: (_74 = config.migrate) === null || _74 === void 0 ? void 0 : _74.fromPath,
        fromStack: (_75 = config.migrate) === null || _75 === void 0 ? void 0 : _75.fromStack,
        outputPath: (_76 = config.migrate) === null || _76 === void 0 ? void 0 : _76.outputPath,
        fromScan: (_77 = config.migrate) === null || _77 === void 0 ? void 0 : _77.fromScan,
        filter: (_78 = config.migrate) === null || _78 === void 0 ? void 0 : _78.filter,
        compress: (_79 = config.migrate) === null || _79 === void 0 ? void 0 : _79.compress,
    };
    const contextOptions = {
        reset: (_80 = config.context) === null || _80 === void 0 ? void 0 : _80.reset,
        force: (_81 = config.context) === null || _81 === void 0 ? void 0 : _81.force,
        clear: (_82 = config.context) === null || _82 === void 0 ? void 0 : _82.clear,
    };
    const docsOptions = {
        browser: (_83 = config.docs) === null || _83 === void 0 ? void 0 : _83.browser,
    };
    const doctorOptions = {};
    const userInput = {
        globalOptions,
        list: listOptions,
        synth: synthOptions,
        bootstrap: bootstrapOptions,
        gc: gcOptions,
        deploy: deployOptions,
        rollback: rollbackOptions,
        import: importOptions,
        watch: watchOptions,
        destroy: destroyOptions,
        diff: diffOptions,
        metadata: metadataOptions,
        acknowledge: acknowledgeOptions,
        notices: noticesOptions,
        init: initOptions,
        migrate: migrateOptions,
        context: contextOptions,
        docs: docsOptions,
        doctor: doctorOptions,
    };
    return userInput;
}
//# sourceMappingURL=data:application/json;base64,