"use strict";
// This is the legacy symbols export file.
// We export a number of known symbols that are imported by users from the `aws-cdk` package.
// Importing these symbols was never officially supported, but here we are.
// See https://github.com/aws/aws-cdk/pull/33021 for more information.
//
// In package.json, section `exports`, we declare all known subpaths as an explicit subpath export resolving to this file.
// This way existing unsanctioned imports don't break immediately.
//
// When attempting to import a subpath other than the explicitly exported ones, the following runtime error will be thrown:
// Error [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './lib/private/subpath' is not defined by "exports" in aws-cdk/package.json
//
// TypeScript can warn users about the not-exported subpath at compile time. However it requires a reasonably modern tsconfig.json.
// Specifically `moduleResolution` must be set to either "node16" or "nodenext".
Object.defineProperty(exports, "__esModule", { value: true });
exports.success = exports.warning = exports.error = exports.debug = exports.trace = exports.increaseVerbosity = exports.setCI = exports.setLogLevel = exports.CI = exports.logLevel = exports.LogLevel = exports.withCorkedLogging = exports.AwsCliCompatible = exports.CredentialPlugins = exports.CfnEvaluationException = exports.cached = exports.availableInitTemplates = exports.versionNumber = exports.latestVersionIfHigher = exports.rootDir = exports.Deployments = exports.deepMerge = exports.lowerCaseFirstCharacter = exports.describe = exports.command = exports.aliases = exports.enableTracing = exports.formatAsBanner = exports.leftPad = exports.RequireApproval = exports.execProgram = exports.CloudExecutable = exports.Bootstrapper = exports.Settings = exports.PROJECT_CONTEXT = exports.Configuration = exports.Command = exports.contentHash = exports.PluginHost = exports.SdkProvider = exports.exec = exports.cli = exports.deployStack = exports.partition = exports.numberFromBool = exports.isEmpty = exports.isArray = exports.ifDefined = exports.flatten = exports.deepClone = void 0;
exports.prefix = exports.data = exports.print = exports.highlight = void 0;
// We need to import the legacy exports via index.ts
// This is because we will bundle all code and dependencies into index.js at build time.
// It's the only place where the code exists as a working, self-contained copy.
// While we could have bundled `legacy-exports.ts` separately, it would create an other copy of the pretty much identical bundle
// and add an additional 16mb+ to the published package.
// To avoid this, we deduplicated the bundled code and run everything through index.ts.
const index_1 = require("./index");
// Re-export all symbols via index.js
// We do this, because index.js is the the fail that will end up with all dependencies bundled
exports.deepClone = index_1.legacy.deepClone, exports.flatten = index_1.legacy.flatten, exports.ifDefined = index_1.legacy.ifDefined, exports.isArray = index_1.legacy.isArray, exports.isEmpty = index_1.legacy.isEmpty, exports.numberFromBool = index_1.legacy.numberFromBool, exports.partition = index_1.legacy.partition, exports.deployStack = index_1.legacy.deployStack, exports.cli = index_1.legacy.cli, exports.exec = index_1.legacy.exec, exports.SdkProvider = index_1.legacy.SdkProvider, exports.PluginHost = index_1.legacy.PluginHost, exports.contentHash = index_1.legacy.contentHash, exports.Command = index_1.legacy.Command, exports.Configuration = index_1.legacy.Configuration, exports.PROJECT_CONTEXT = index_1.legacy.PROJECT_CONTEXT, exports.Settings = index_1.legacy.Settings, exports.Bootstrapper = index_1.legacy.Bootstrapper, exports.CloudExecutable = index_1.legacy.CloudExecutable, exports.execProgram = index_1.legacy.execProgram, exports.RequireApproval = index_1.legacy.RequireApproval, exports.leftPad = index_1.legacy.leftPad, exports.formatAsBanner = index_1.legacy.formatAsBanner, exports.enableTracing = index_1.legacy.enableTracing, exports.aliases = index_1.legacy.aliases, exports.command = index_1.legacy.command, exports.describe = index_1.legacy.describe, exports.lowerCaseFirstCharacter = index_1.legacy.lowerCaseFirstCharacter, exports.deepMerge = index_1.legacy.deepMerge, exports.Deployments = index_1.legacy.Deployments, exports.rootDir = index_1.legacy.rootDir, exports.latestVersionIfHigher = index_1.legacy.latestVersionIfHigher, exports.versionNumber = index_1.legacy.versionNumber, exports.availableInitTemplates = index_1.legacy.availableInitTemplates, exports.cached = index_1.legacy.cached, exports.CfnEvaluationException = index_1.legacy.CfnEvaluationException, exports.CredentialPlugins = index_1.legacy.CredentialPlugins, exports.AwsCliCompatible = index_1.legacy.AwsCliCompatible, exports.withCorkedLogging = index_1.legacy.withCorkedLogging, exports.LogLevel = index_1.legacy.LogLevel, exports.logLevel = index_1.legacy.logLevel, exports.CI = index_1.legacy.CI, exports.setLogLevel = index_1.legacy.setLogLevel, exports.setCI = index_1.legacy.setCI, exports.increaseVerbosity = index_1.legacy.increaseVerbosity, exports.trace = index_1.legacy.trace, exports.debug = index_1.legacy.debug, exports.error = index_1.legacy.error, exports.warning = index_1.legacy.warning, exports.success = index_1.legacy.success, exports.highlight = index_1.legacy.highlight, exports.print = index_1.legacy.print, exports.data = index_1.legacy.data, exports.prefix = index_1.legacy.prefix;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnYWN5LWV4cG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsZWdhY3ktZXhwb3J0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMENBQTBDO0FBQzFDLDZGQUE2RjtBQUM3RiwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLEVBQUU7QUFDRiwwSEFBMEg7QUFDMUgsa0VBQWtFO0FBQ2xFLEVBQUU7QUFDRiwySEFBMkg7QUFDM0gscUlBQXFJO0FBQ3JJLEVBQUU7QUFDRixtSUFBbUk7QUFDbkksZ0ZBQWdGOzs7O0FBRWhGLG9EQUFvRDtBQUNwRCx3RkFBd0Y7QUFDeEYsK0VBQStFO0FBQy9FLGdJQUFnSTtBQUNoSSx3REFBd0Q7QUFDeEQsdUZBQXVGO0FBQ3ZGLG1DQUFpQztBQWFqQyxxQ0FBcUM7QUFDckMsOEZBQThGO0FBRTVGLGlCQUFTLEdBc0RQLGNBQU0sWUFyRFIsZUFBTyxHQXFETCxjQUFNLFVBcERSLGlCQUFTLEdBb0RQLGNBQU0sWUFuRFIsZUFBTyxHQW1ETCxjQUFNLFVBbERSLGVBQU8sR0FrREwsY0FBTSxVQWpEUixzQkFBYyxHQWlEWixjQUFNLGlCQWhEUixpQkFBUyxHQWdEUCxjQUFNLFlBL0NSLG1CQUFXLEdBK0NULGNBQU0sY0E5Q1IsV0FBRyxHQThDRCxjQUFNLE1BN0NSLFlBQUksR0E2Q0YsY0FBTSxPQTVDUixtQkFBVyxHQTRDVCxjQUFNLGNBM0NSLGtCQUFVLEdBMkNSLGNBQU0sYUExQ1IsbUJBQVcsR0EwQ1QsY0FBTSxjQXpDUixlQUFPLEdBeUNMLGNBQU0sVUF4Q1IscUJBQWEsR0F3Q1gsY0FBTSxnQkF2Q1IsdUJBQWUsR0F1Q2IsY0FBTSxrQkF0Q1IsZ0JBQVEsR0FzQ04sY0FBTSxXQXJDUixvQkFBWSxHQXFDVixjQUFNLGVBcENSLHVCQUFlLEdBb0NiLGNBQU0sa0JBbkNSLG1CQUFXLEdBbUNULGNBQU0sY0FsQ1IsdUJBQWUsR0FrQ2IsY0FBTSxrQkFqQ1IsZUFBTyxHQWlDTCxjQUFNLFVBaENSLHNCQUFjLEdBZ0NaLGNBQU0saUJBL0JSLHFCQUFhLEdBK0JYLGNBQU0sZ0JBOUJSLGVBQU8sR0E4QkwsY0FBTSxVQTdCUixlQUFPLEdBNkJMLGNBQU0sVUE1QlIsZ0JBQVEsR0E0Qk4sY0FBTSxXQTNCUiwrQkFBdUIsR0EyQnJCLGNBQU0sMEJBMUJSLGlCQUFTLEdBMEJQLGNBQU0sWUF6QlIsbUJBQVcsR0F5QlQsY0FBTSxjQXhCUixlQUFPLEdBd0JMLGNBQU0sVUF2QlIsNkJBQXFCLEdBdUJuQixjQUFNLHdCQXRCUixxQkFBYSxHQXNCWCxjQUFNLGdCQXJCUiw4QkFBc0IsR0FxQnBCLGNBQU0seUJBcEJSLGNBQU0sR0FvQkosY0FBTSxTQW5CUiw4QkFBc0IsR0FtQnBCLGNBQU0seUJBbEJSLHlCQUFpQixHQWtCZixjQUFNLG9CQWpCUix3QkFBZ0IsR0FpQmQsY0FBTSxtQkFoQlIseUJBQWlCLEdBZ0JmLGNBQU0sb0JBZlIsZ0JBQVEsR0FlTixjQUFNLFdBZFIsZ0JBQVEsR0FjTixjQUFNLFdBYlIsVUFBRSxHQWFBLGNBQU0sS0FaUixtQkFBVyxHQVlULGNBQU0sY0FYUixhQUFLLEdBV0gsY0FBTSxRQVZSLHlCQUFpQixHQVVmLGNBQU0sb0JBVFIsYUFBSyxHQVNILGNBQU0sUUFSUixhQUFLLEdBUUgsY0FBTSxRQVBSLGFBQUssR0FPSCxjQUFNLFFBTlIsZUFBTyxHQU1MLGNBQU0sVUFMUixlQUFPLEdBS0wsY0FBTSxVQUpSLGlCQUFTLEdBSVAsY0FBTSxZQUhSLGFBQUssR0FHSCxjQUFNLFFBRlIsWUFBSSxHQUVGLGNBQU0sT0FEUixjQUFNLEdBQ0osY0FBTSxRQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBpcyB0aGUgbGVnYWN5IHN5bWJvbHMgZXhwb3J0IGZpbGUuXG4vLyBXZSBleHBvcnQgYSBudW1iZXIgb2Yga25vd24gc3ltYm9scyB0aGF0IGFyZSBpbXBvcnRlZCBieSB1c2VycyBmcm9tIHRoZSBgYXdzLWNka2AgcGFja2FnZS5cbi8vIEltcG9ydGluZyB0aGVzZSBzeW1ib2xzIHdhcyBuZXZlciBvZmZpY2lhbGx5IHN1cHBvcnRlZCwgYnV0IGhlcmUgd2UgYXJlLlxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MvYXdzLWNkay9wdWxsLzMzMDIxIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuLy9cbi8vIEluIHBhY2thZ2UuanNvbiwgc2VjdGlvbiBgZXhwb3J0c2AsIHdlIGRlY2xhcmUgYWxsIGtub3duIHN1YnBhdGhzIGFzIGFuIGV4cGxpY2l0IHN1YnBhdGggZXhwb3J0IHJlc29sdmluZyB0byB0aGlzIGZpbGUuXG4vLyBUaGlzIHdheSBleGlzdGluZyB1bnNhbmN0aW9uZWQgaW1wb3J0cyBkb24ndCBicmVhayBpbW1lZGlhdGVseS5cbi8vXG4vLyBXaGVuIGF0dGVtcHRpbmcgdG8gaW1wb3J0IGEgc3VicGF0aCBvdGhlciB0aGFuIHRoZSBleHBsaWNpdGx5IGV4cG9ydGVkIG9uZXMsIHRoZSBmb2xsb3dpbmcgcnVudGltZSBlcnJvciB3aWxsIGJlIHRocm93bjpcbi8vIEVycm9yIFtFUlJfUEFDS0FHRV9QQVRIX05PVF9FWFBPUlRFRF06IFBhY2thZ2Ugc3VicGF0aCAnLi9saWIvcHJpdmF0ZS9zdWJwYXRoJyBpcyBub3QgZGVmaW5lZCBieSBcImV4cG9ydHNcIiBpbiBhd3MtY2RrL3BhY2thZ2UuanNvblxuLy9cbi8vIFR5cGVTY3JpcHQgY2FuIHdhcm4gdXNlcnMgYWJvdXQgdGhlIG5vdC1leHBvcnRlZCBzdWJwYXRoIGF0IGNvbXBpbGUgdGltZS4gSG93ZXZlciBpdCByZXF1aXJlcyBhIHJlYXNvbmFibHkgbW9kZXJuIHRzY29uZmlnLmpzb24uXG4vLyBTcGVjaWZpY2FsbHkgYG1vZHVsZVJlc29sdXRpb25gIG11c3QgYmUgc2V0IHRvIGVpdGhlciBcIm5vZGUxNlwiIG9yIFwibm9kZW5leHRcIi5cblxuLy8gV2UgbmVlZCB0byBpbXBvcnQgdGhlIGxlZ2FjeSBleHBvcnRzIHZpYSBpbmRleC50c1xuLy8gVGhpcyBpcyBiZWNhdXNlIHdlIHdpbGwgYnVuZGxlIGFsbCBjb2RlIGFuZCBkZXBlbmRlbmNpZXMgaW50byBpbmRleC5qcyBhdCBidWlsZCB0aW1lLlxuLy8gSXQncyB0aGUgb25seSBwbGFjZSB3aGVyZSB0aGUgY29kZSBleGlzdHMgYXMgYSB3b3JraW5nLCBzZWxmLWNvbnRhaW5lZCBjb3B5LlxuLy8gV2hpbGUgd2UgY291bGQgaGF2ZSBidW5kbGVkIGBsZWdhY3ktZXhwb3J0cy50c2Agc2VwYXJhdGVseSwgaXQgd291bGQgY3JlYXRlIGFuIG90aGVyIGNvcHkgb2YgdGhlIHByZXR0eSBtdWNoIGlkZW50aWNhbCBidW5kbGVcbi8vIGFuZCBhZGQgYW4gYWRkaXRpb25hbCAxNm1iKyB0byB0aGUgcHVibGlzaGVkIHBhY2thZ2UuXG4vLyBUbyBhdm9pZCB0aGlzLCB3ZSBkZWR1cGxpY2F0ZWQgdGhlIGJ1bmRsZWQgY29kZSBhbmQgcnVuIGV2ZXJ5dGhpbmcgdGhyb3VnaCBpbmRleC50cy5cbmltcG9ydCB7IGxlZ2FjeSB9IGZyb20gJy4vaW5kZXgnO1xuXG4vLyBXZSBhbHNvIG5lZWQgdG8gcmUtZXhwb3J0IHNvbWUgdHlwZXNcbi8vIFRoZXNlIGRvbid0IG5lZWQgdG8gcGFydGljaXBhdGUgaW4gdGhlIGJ1bmRsaW5nLCBzbyB3ZSBjYW4ganVzdCBwdXQgdGhlbSBoZXJlXG5leHBvcnQgdHlwZSB7IE9iaiB9IGZyb20gJy4vdXRpbCc7XG5leHBvcnQgdHlwZSB7IEFjY291bnQgfSBmcm9tICcuL2FwaS9hd3MtYXV0aCc7XG5leHBvcnQgdHlwZSB7IENvbnRleHRQcm92aWRlclBsdWdpbiB9IGZyb20gJy4vYXBpL3BsdWdpbic7XG5leHBvcnQgdHlwZSB7IEJvb3RzdHJhcEVudmlyb25tZW50T3B0aW9ucywgQm9vdHN0cmFwU291cmNlIH0gZnJvbSAnLi9hcGkvYm9vdHN0cmFwJztcbmV4cG9ydCB0eXBlIHsgU3RhY2tTZWxlY3RvciB9IGZyb20gJy4vYXBpL2N4YXBwL2Nsb3VkLWFzc2VtYmx5JztcbmV4cG9ydCB0eXBlIHsgRGVwbG95U3RhY2tSZXN1bHQgfSBmcm9tICcuL2FwaS9kZXBsb3ltZW50cyc7XG5leHBvcnQgdHlwZSB7IENvbXBvbmVudCB9IGZyb20gJy4vbm90aWNlcyc7XG5leHBvcnQgdHlwZSB7IExvZ2dlckZ1bmN0aW9uIH0gZnJvbSAnLi9sZWdhY3ktbG9nZ2luZy1zb3VyY2UnO1xuXG4vLyBSZS1leHBvcnQgYWxsIHN5bWJvbHMgdmlhIGluZGV4LmpzXG4vLyBXZSBkbyB0aGlzLCBiZWNhdXNlIGluZGV4LmpzIGlzIHRoZSB0aGUgZmFpbCB0aGF0IHdpbGwgZW5kIHVwIHdpdGggYWxsIGRlcGVuZGVuY2llcyBidW5kbGVkXG5leHBvcnQgY29uc3Qge1xuICBkZWVwQ2xvbmUsXG4gIGZsYXR0ZW4sXG4gIGlmRGVmaW5lZCxcbiAgaXNBcnJheSxcbiAgaXNFbXB0eSxcbiAgbnVtYmVyRnJvbUJvb2wsXG4gIHBhcnRpdGlvbixcbiAgZGVwbG95U3RhY2ssXG4gIGNsaSxcbiAgZXhlYyxcbiAgU2RrUHJvdmlkZXIsXG4gIFBsdWdpbkhvc3QsXG4gIGNvbnRlbnRIYXNoLFxuICBDb21tYW5kLFxuICBDb25maWd1cmF0aW9uLFxuICBQUk9KRUNUX0NPTlRFWFQsXG4gIFNldHRpbmdzLFxuICBCb290c3RyYXBwZXIsXG4gIENsb3VkRXhlY3V0YWJsZSxcbiAgZXhlY1Byb2dyYW0sXG4gIFJlcXVpcmVBcHByb3ZhbCxcbiAgbGVmdFBhZCxcbiAgZm9ybWF0QXNCYW5uZXIsXG4gIGVuYWJsZVRyYWNpbmcsXG4gIGFsaWFzZXMsXG4gIGNvbW1hbmQsXG4gIGRlc2NyaWJlLFxuICBsb3dlckNhc2VGaXJzdENoYXJhY3RlcixcbiAgZGVlcE1lcmdlLFxuICBEZXBsb3ltZW50cyxcbiAgcm9vdERpcixcbiAgbGF0ZXN0VmVyc2lvbklmSGlnaGVyLFxuICB2ZXJzaW9uTnVtYmVyLFxuICBhdmFpbGFibGVJbml0VGVtcGxhdGVzLFxuICBjYWNoZWQsXG4gIENmbkV2YWx1YXRpb25FeGNlcHRpb24sXG4gIENyZWRlbnRpYWxQbHVnaW5zLFxuICBBd3NDbGlDb21wYXRpYmxlLFxuICB3aXRoQ29ya2VkTG9nZ2luZyxcbiAgTG9nTGV2ZWwsXG4gIGxvZ0xldmVsLFxuICBDSSxcbiAgc2V0TG9nTGV2ZWwsXG4gIHNldENJLFxuICBpbmNyZWFzZVZlcmJvc2l0eSxcbiAgdHJhY2UsXG4gIGRlYnVnLFxuICBlcnJvcixcbiAgd2FybmluZyxcbiAgc3VjY2VzcyxcbiAgaGlnaGxpZ2h0LFxuICBwcmludCxcbiAgZGF0YSxcbiAgcHJlZml4LFxufSA9IGxlZ2FjeTtcbiJdfQ==