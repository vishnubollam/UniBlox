"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasePublishProgressListener = exports.EVENT_TO_LEVEL = exports.PublishingAws = void 0;
exports.publishAssets = publishAssets;
const cx_api_1 = require("@aws-cdk/cx-api");
const cdk_assets_1 = require("cdk-assets");
const messages_1 = require("../../cli/messages");
const error_1 = require("../../toolkit/error");
const plugin_1 = require("../plugin");
/**
 * Use cdk-assets to publish all assets in the given manifest.
 *
 * @deprecated used in legacy deployments only, should be migrated at some point
 */
async function publishAssets(manifest, sdk, targetEnv, options, { ioHost, action }) {
    var _a;
    // This shouldn't really happen (it's a programming error), but we don't have
    // the types here to guide us. Do an runtime validation to be super super sure.
    if (targetEnv.account === undefined ||
        targetEnv.account === cx_api_1.UNKNOWN_ACCOUNT ||
        targetEnv.region === undefined ||
        targetEnv.account === cx_api_1.UNKNOWN_REGION) {
        throw new error_1.ToolkitError(`Asset publishing requires resolved account and region, got ${JSON.stringify(targetEnv)}`);
    }
    const publisher = new cdk_assets_1.AssetPublishing(manifest, {
        aws: new PublishingAws(sdk, targetEnv),
        progressListener: new PublishingProgressListener({ ioHost, action }),
        throwOnError: false,
        publishInParallel: (_a = options.parallel) !== null && _a !== void 0 ? _a : true,
        buildAssets: true,
        publishAssets: true,
        quiet: false,
    });
    await publisher.publish({ allowCrossAccount: options.allowCrossAccount });
    if (publisher.hasFailures) {
        throw new error_1.ToolkitError('Failed to publish one or more assets. See the error messages above for more information.');
    }
}
class PublishingAws {
    constructor(
    /**
     * The base SDK to work with
     */
    aws, 
    /**
     * Environment where the stack we're deploying is going
     */
    targetEnv) {
        this.aws = aws;
        this.targetEnv = targetEnv;
        this.sdkCache = new Map();
    }
    async discoverPartition() {
        var _a;
        return (_a = (await this.aws.baseCredentialsPartition(this.targetEnv, plugin_1.Mode.ForWriting))) !== null && _a !== void 0 ? _a : 'aws';
    }
    async discoverDefaultRegion() {
        return this.targetEnv.region;
    }
    async discoverCurrentAccount() {
        const account = await this.aws.defaultAccount();
        return (account !== null && account !== void 0 ? account : {
            accountId: '<unknown account>',
            partition: 'aws',
        });
    }
    async discoverTargetAccount(options) {
        return (await this.sdk(options)).currentAccount();
    }
    async s3Client(options) {
        return (await this.sdk(options)).s3();
    }
    async ecrClient(options) {
        return (await this.sdk(options)).ecr();
    }
    async secretsManagerClient(options) {
        return (await this.sdk(options)).secretsManager();
    }
    /**
     * Get an SDK appropriate for the given client options
     */
    async sdk(options) {
        var _a;
        const env = {
            ...this.targetEnv,
            region: (_a = options.region) !== null && _a !== void 0 ? _a : this.targetEnv.region, // Default: same region as the stack
        };
        const cacheKeyMap = {
            env, // region, name, account
            assumeRuleArn: options.assumeRoleArn,
            assumeRoleExternalId: options.assumeRoleExternalId,
            quiet: options.quiet,
        };
        if (options.assumeRoleAdditionalOptions) {
            cacheKeyMap.assumeRoleAdditionalOptions = options.assumeRoleAdditionalOptions;
        }
        const cacheKey = JSON.stringify(cacheKeyMap);
        const maybeSdk = this.sdkCache.get(cacheKey);
        if (maybeSdk) {
            return maybeSdk;
        }
        const sdk = (await this.aws.forEnvironment(env, plugin_1.Mode.ForWriting, {
            assumeRoleArn: options.assumeRoleArn,
            assumeRoleExternalId: options.assumeRoleExternalId,
            assumeRoleAdditionalOptions: options.assumeRoleAdditionalOptions,
        }, options.quiet)).sdk;
        this.sdkCache.set(cacheKey, sdk);
        return sdk;
    }
}
exports.PublishingAws = PublishingAws;
exports.EVENT_TO_LEVEL = {
    build: 'debug',
    cached: 'debug',
    check: 'debug',
    debug: 'debug',
    fail: 'error',
    found: 'debug',
    start: 'info',
    success: 'info',
    upload: 'debug',
    shell_open: 'debug',
    shell_stderr: false,
    shell_stdout: false,
    shell_close: false,
};
class BasePublishProgressListener {
    constructor({ ioHost, action }) {
        this.ioHost = ioHost;
        this.action = action;
    }
    onPublishEvent(type, event) {
        const level = exports.EVENT_TO_LEVEL[type];
        if (level) {
            void this.ioHost.notify((0, messages_1.formatMessage)({
                level,
                action: this.action,
                message: this.getMessage(type, event),
            }));
        }
    }
}
exports.BasePublishProgressListener = BasePublishProgressListener;
class PublishingProgressListener extends BasePublishProgressListener {
    getMessage(type, event) {
        return `[${event.percentComplete}%] ${type}: ${event.message}`;
    }
}
//# sourceMappingURL=data:application/json;base64,