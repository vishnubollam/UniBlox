"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkToCliLogger = void 0;
exports.formatSdkLoggerContent = formatSdkLoggerContent;
const util_1 = require("util");
const serialize_1 = require("../../serialize");
class SdkToCliLogger {
    constructor(ioHost) {
        this.ioHost = ioHost;
    }
    notify(level, ...content) {
        void this.ioHost.notify({
            time: new Date(),
            level: 'trace', // always log all SDK logs at trace level, no matter what level they are coming from the SDK
            action: 'none',
            code: 'CDK_SDK_I0000',
            message: (0, util_1.format)('[SDK %s] %s', level, formatSdkLoggerContent(content)),
        });
    }
    trace(..._content) {
        // This is too much detail for our logs
        // this.notify('trace', ...content);
    }
    debug(..._content) {
        // This is too much detail for our logs
        // this.notify('debug', ...content);
    }
    /**
     * Info is called mostly (exclusively?) for successful API calls
     *
     * Payload:
     *
     * (Note the input contains entire CFN templates, for example)
     *
     * ```
     * {
     *   clientName: 'S3Client',
     *   commandName: 'GetBucketLocationCommand',
     *   input: {
     *     Bucket: '.....',
     *     ExpectedBucketOwner: undefined
     *   },
     *   output: { LocationConstraint: 'eu-central-1' },
     *   metadata: {
     *     httpStatusCode: 200,
     *     requestId: '....',
     *     extendedRequestId: '...',
     *     cfId: undefined,
     *     attempts: 1,
     *     totalRetryDelay: 0
     *   }
     * }
     * ```
     */
    info(...content) {
        this.notify('info', ...content);
    }
    warn(...content) {
        this.notify('warn', ...content);
    }
    /**
     * Error is called mostly (exclusively?) for failing API calls
     *
     * Payload (input would be the entire API call arguments).
     *
     * ```
     * {
     *   clientName: 'STSClient',
     *   commandName: 'GetCallerIdentityCommand',
     *   input: {},
     *   error: AggregateError [ECONNREFUSED]:
     *       at internalConnectMultiple (node:net:1121:18)
     *       at afterConnectMultiple (node:net:1688:7) {
     *     code: 'ECONNREFUSED',
     *     '$metadata': { attempts: 3, totalRetryDelay: 600 },
     *     [errors]: [ [Error], [Error] ]
     *   },
     *   metadata: { attempts: 3, totalRetryDelay: 600 }
     * }
     * ```
     */
    error(...content) {
        this.notify('error', ...content);
    }
}
exports.SdkToCliLogger = SdkToCliLogger;
/**
 * This can be anything.
 *
 * For debug, it seems to be mostly strings.
 * For info, it seems to be objects.
 *
 * Stringify and join without separator.
 */
function formatSdkLoggerContent(content) {
    if (content.length === 1) {
        const apiFmt = formatApiCall(content[0]);
        if (apiFmt) {
            return apiFmt;
        }
    }
    return content.map((x) => typeof x === 'string' ? x : (0, util_1.inspect)(x)).join('');
}
function formatApiCall(content) {
    var _a, _b, _c, _d;
    if (!isSdkApiCallSuccess(content) && !isSdkApiCallError(content)) {
        return undefined;
    }
    const service = content.clientName.replace(/Client$/, '');
    const api = content.commandName.replace(/Command$/, '');
    const parts = [];
    if (((_b = (_a = content.metadata) === null || _a === void 0 ? void 0 : _a.attempts) !== null && _b !== void 0 ? _b : 0) > 1) {
        parts.push(`[${(_c = content.metadata) === null || _c === void 0 ? void 0 : _c.attempts} attempts, ${(_d = content.metadata) === null || _d === void 0 ? void 0 : _d.totalRetryDelay}ms retry]`);
    }
    parts.push(`${service}.${api}(${JSON.stringify(content.input, serialize_1.replacerBufferWithInfo)})`);
    if (isSdkApiCallSuccess(content)) {
        parts.push('-> OK');
    }
    else {
        parts.push(`-> ${content.error}`);
    }
    return parts.join(' ');
}
function isSdkApiCallSuccess(x) {
    return x && typeof x === 'object' && x.commandName && x.output;
}
function isSdkApiCallError(x) {
    return x && typeof x === 'object' && x.commandName && x.error;
}
//# sourceMappingURL=data:application/json;base64,