"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setSdkTracing = setSdkTracing;
exports.callTrace = callTrace;
exports.traceMemberMethods = traceMemberMethods;
let ENABLED = false;
let INDENT = 0;
function setSdkTracing(enabled) {
    ENABLED = enabled;
}
/**
 * Method decorator to trace a single static or member method, any time it's called
 */
function callTrace(fn, className, logger) {
    if (!ENABLED || !logger) {
        return;
    }
    logger.info(`[trace] ${' '.repeat(INDENT)}${className || '(anonymous)'}#${fn}()`);
}
/**
 * Method decorator to trace a single member method any time it's called
 */
function traceCall(receiver, _propertyKey, descriptor, parentClassName) {
    const fn = descriptor.value;
    const className = typeof receiver === 'function' ? receiver.name : parentClassName;
    descriptor.value = function (...args) {
        const logger = this.logger;
        if (!ENABLED || typeof (logger === null || logger === void 0 ? void 0 : logger.info) !== 'function') {
            return fn.apply(this, args);
        }
        logger.info.apply(logger, [`[trace] ${' '.repeat(INDENT)}${className || this.constructor.name || '(anonymous)'}#${fn.name}()`]);
        INDENT += 2;
        const ret = fn.apply(this, args);
        if (ret instanceof Promise) {
            return ret.finally(() => {
                INDENT -= 2;
            });
        }
        else {
            INDENT -= 2;
            return ret;
        }
    };
    return descriptor;
}
/**
 * Class decorator, enable tracing for all member methods on this class
 * @deprecated this doesn't work well with localized logging instances, don't use
 */
function traceMemberMethods(constructor) {
    var _a;
    // Instance members
    for (const [name, descriptor] of Object.entries(Object.getOwnPropertyDescriptors(constructor.prototype))) {
        if (typeof descriptor.value !== 'function') {
            continue;
        }
        const newDescriptor = (_a = traceCall(constructor.prototype, name, descriptor, constructor.name)) !== null && _a !== void 0 ? _a : descriptor;
        Object.defineProperty(constructor.prototype, name, newDescriptor);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRyYWNpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFLQSxzQ0FFQztBQUtELDhCQU1DO0FBaUNELGdEQU9DO0FBeERELElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztBQUNwQixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFFZixTQUFnQixhQUFhLENBQUMsT0FBZ0I7SUFDNUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUNwQixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixTQUFTLENBQUMsRUFBVSxFQUFFLFNBQWtCLEVBQUUsTUFBZTtJQUN2RSxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDeEIsT0FBTztJQUNULENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTLElBQUksYUFBYSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDcEYsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyxTQUFTLENBQUMsUUFBZ0IsRUFBRSxZQUFvQixFQUFFLFVBQThCLEVBQUUsZUFBd0I7SUFDakgsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQztJQUM1QixNQUFNLFNBQVMsR0FBRyxPQUFPLFFBQVEsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQztJQUVuRixVQUFVLENBQUMsS0FBSyxHQUFHLFVBQVUsR0FBRyxJQUFXO1FBQ3pDLE1BQU0sTUFBTSxHQUFJLElBQVksQ0FBQyxNQUFNLENBQUM7UUFDcEMsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUEsTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLElBQUksQ0FBQSxLQUFLLFVBQVUsRUFBRSxDQUFDO1lBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUFDLENBQUM7UUFFcEYsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsV0FBVyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxhQUFhLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNoSSxNQUFNLElBQUksQ0FBQyxDQUFDO1FBRVosTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDakMsSUFBSSxHQUFHLFlBQVksT0FBTyxFQUFFLENBQUM7WUFDM0IsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRTtnQkFDdEIsTUFBTSxJQUFJLENBQUMsQ0FBQztZQUNkLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLElBQUksQ0FBQyxDQUFDO1lBQ1osT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLGtCQUFrQixDQUFDLFdBQXFCOztJQUN0RCxtQkFBbUI7SUFDbkIsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLHlCQUF5QixDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDekcsSUFBSSxPQUFPLFVBQVUsQ0FBQyxLQUFLLEtBQUssVUFBVSxFQUFFLENBQUM7WUFBQyxTQUFTO1FBQUMsQ0FBQztRQUN6RCxNQUFNLGFBQWEsR0FBRyxNQUFBLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxtQ0FBSSxVQUFVLENBQUM7UUFDekcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNwRSxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTG9nZ2VyIH0gZnJvbSAnQHNtaXRoeS90eXBlcyc7XG5cbmxldCBFTkFCTEVEID0gZmFsc2U7XG5sZXQgSU5ERU5UID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFNka1RyYWNpbmcoZW5hYmxlZDogYm9vbGVhbikge1xuICBFTkFCTEVEID0gZW5hYmxlZDtcbn1cblxuLyoqXG4gKiBNZXRob2QgZGVjb3JhdG9yIHRvIHRyYWNlIGEgc2luZ2xlIHN0YXRpYyBvciBtZW1iZXIgbWV0aG9kLCBhbnkgdGltZSBpdCdzIGNhbGxlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FsbFRyYWNlKGZuOiBzdHJpbmcsIGNsYXNzTmFtZT86IHN0cmluZywgbG9nZ2VyPzogTG9nZ2VyKSB7XG4gIGlmICghRU5BQkxFRCB8fCAhbG9nZ2VyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbG9nZ2VyLmluZm8oYFt0cmFjZV0gJHsnICcucmVwZWF0KElOREVOVCl9JHtjbGFzc05hbWUgfHwgJyhhbm9ueW1vdXMpJ30jJHtmbn0oKWApO1xufVxuXG4vKipcbiAqIE1ldGhvZCBkZWNvcmF0b3IgdG8gdHJhY2UgYSBzaW5nbGUgbWVtYmVyIG1ldGhvZCBhbnkgdGltZSBpdCdzIGNhbGxlZFxuICovXG5mdW5jdGlvbiB0cmFjZUNhbGwocmVjZWl2ZXI6IG9iamVjdCwgX3Byb3BlcnR5S2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvciwgcGFyZW50Q2xhc3NOYW1lPzogc3RyaW5nKSB7XG4gIGNvbnN0IGZuID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgY29uc3QgY2xhc3NOYW1lID0gdHlwZW9mIHJlY2VpdmVyID09PSAnZnVuY3Rpb24nID8gcmVjZWl2ZXIubmFtZSA6IHBhcmVudENsYXNzTmFtZTtcblxuICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY29uc3QgbG9nZ2VyID0gKHRoaXMgYXMgYW55KS5sb2dnZXI7XG4gICAgaWYgKCFFTkFCTEVEIHx8IHR5cGVvZiBsb2dnZXI/LmluZm8gIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpOyB9XG5cbiAgICBsb2dnZXIuaW5mby5hcHBseShsb2dnZXIsIFtgW3RyYWNlXSAkeycgJy5yZXBlYXQoSU5ERU5UKX0ke2NsYXNzTmFtZSB8fCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgfHwgJyhhbm9ueW1vdXMpJ30jJHtmbi5uYW1lfSgpYF0pO1xuICAgIElOREVOVCArPSAyO1xuXG4gICAgY29uc3QgcmV0ID0gZm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgaWYgKHJldCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgIHJldHVybiByZXQuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIElOREVOVCAtPSAyO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIElOREVOVCAtPSAyO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gIH07XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufVxuXG4vKipcbiAqIENsYXNzIGRlY29yYXRvciwgZW5hYmxlIHRyYWNpbmcgZm9yIGFsbCBtZW1iZXIgbWV0aG9kcyBvbiB0aGlzIGNsYXNzXG4gKiBAZGVwcmVjYXRlZCB0aGlzIGRvZXNuJ3Qgd29yayB3ZWxsIHdpdGggbG9jYWxpemVkIGxvZ2dpbmcgaW5zdGFuY2VzLCBkb24ndCB1c2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYWNlTWVtYmVyTWV0aG9kcyhjb25zdHJ1Y3RvcjogRnVuY3Rpb24pIHtcbiAgLy8gSW5zdGFuY2UgbWVtYmVyc1xuICBmb3IgKGNvbnN0IFtuYW1lLCBkZXNjcmlwdG9yXSBvZiBPYmplY3QuZW50cmllcyhPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhjb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgIGlmICh0eXBlb2YgZGVzY3JpcHRvci52YWx1ZSAhPT0gJ2Z1bmN0aW9uJykgeyBjb250aW51ZTsgfVxuICAgIGNvbnN0IG5ld0Rlc2NyaXB0b3IgPSB0cmFjZUNhbGwoY29uc3RydWN0b3IucHJvdG90eXBlLCBuYW1lLCBkZXNjcmlwdG9yLCBjb25zdHJ1Y3Rvci5uYW1lKSA/PyBkZXNjcmlwdG9yO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIG5hbWUsIG5ld0Rlc2NyaXB0b3IpO1xuICB9XG59XG4iXX0=