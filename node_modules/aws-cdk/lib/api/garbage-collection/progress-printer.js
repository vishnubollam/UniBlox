"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressPrinter = void 0;
const chalk = require("chalk");
const messages_1 = require("../../cli/messages");
const error_1 = require("../../toolkit/error");
class ProgressPrinter {
    constructor(msg, totalAssets, interval) {
        this.ioHost = msg.ioHost;
        this.action = msg.action;
        this.totalAssets = totalAssets;
        this.assetsScanned = 0;
        this.taggedAsset = 0;
        this.taggedAssetsSizeMb = 0;
        this.deletedAssets = 0;
        this.deletedAssetsSizeMb = 0;
        this.interval = interval !== null && interval !== void 0 ? interval : 10000;
        this.isPaused = false;
    }
    reportScannedAsset(amt) {
        this.assetsScanned += amt;
    }
    reportTaggedAsset(assets) {
        this.taggedAsset += assets.length;
        const sizeInBytes = assets.reduce((total, asset) => total + asset.size, 0);
        this.taggedAssetsSizeMb += sizeInBytes / 1048576;
    }
    reportDeletedAsset(assets) {
        this.deletedAssets += assets.length;
        const sizeInBytes = assets.reduce((total, asset) => total + asset.size, 0);
        this.deletedAssetsSizeMb += sizeInBytes / 1048576;
    }
    start() {
        // If there is already a running setInterval, throw an error.
        // This is because if this.setInterval is reassigned to another setInterval,
        // the original setInterval remains and can no longer be cleared.
        if (this.setInterval) {
            throw new error_1.ToolkitError('ProgressPrinter is already running. Stop it first using the stop() method before starting it again.');
        }
        this.setInterval = setInterval(() => {
            if (!this.isPaused) {
                this.print();
            }
        }, this.interval);
    }
    pause() {
        this.isPaused = true;
    }
    resume() {
        this.isPaused = false;
    }
    stop() {
        clearInterval(this.setInterval);
        // print one last time if not paused
        if (!this.isPaused) {
            this.print();
        }
    }
    print() {
        const percentage = ((this.assetsScanned / this.totalAssets) * 100).toFixed(2);
        // print in MiB until we hit at least 1 GiB of data tagged/deleted
        if (Math.max(this.taggedAssetsSizeMb, this.deletedAssetsSizeMb) >= 1000) {
            void this.ioHost.notify((0, messages_1.info)(this.action, chalk.green(`[${percentage}%] ${this.assetsScanned} files scanned: ${this.taggedAsset} assets (${(this.taggedAssetsSizeMb / 1000).toFixed(2)} GiB) tagged, ${this.deletedAssets} assets (${(this.deletedAssetsSizeMb / 1000).toFixed(2)} GiB) deleted.`)));
        }
        else {
            void this.ioHost.notify((0, messages_1.info)(this.action, chalk.green(`[${percentage}%] ${this.assetsScanned} files scanned: ${this.taggedAsset} assets (${this.taggedAssetsSizeMb.toFixed(2)} MiB) tagged, ${this.deletedAssets} assets (${this.deletedAssetsSizeMb.toFixed(2)} MiB) deleted.`)));
        }
    }
}
exports.ProgressPrinter = ProgressPrinter;
//# sourceMappingURL=data:application/json;base64,