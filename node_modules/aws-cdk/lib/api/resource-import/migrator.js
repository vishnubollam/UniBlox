"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceMigrator = void 0;
const chalk = require("chalk");
const fs = require("fs-extra");
const importer_1 = require("./importer");
const messages_1 = require("../../cli/messages");
const string_manipulation_1 = require("../util/string-manipulation");
class ResourceMigrator {
    constructor(props) {
        this.props = props;
        this.ioHost = props.ioHost;
        this.action = props.action;
    }
    /**
     * Checks to see if a migrate.json file exists. If it does and the source is either `filepath` or
     * is in the same environment as the stack deployment, a new stack is created and the resources are
     * migrated to the stack using an IMPORT changeset. The normal deployment will resume after this is complete
     * to add back in any outputs and the CDKMetadata.
     */
    async tryMigrateResources(stacks, options) {
        const stack = stacks.stackArtifacts[0];
        const migrateDeployment = new importer_1.ResourceImporter(stack, {
            deployments: this.props.deployments,
            ioHost: this.ioHost,
            action: this.action,
        });
        const resourcesToImport = await this.tryGetResources(await migrateDeployment.resolveEnvironment());
        if (resourcesToImport) {
            await this.ioHost.notify((0, messages_1.info)(this.action, `${chalk.bold(stack.displayName)}: creating stack for resource migration...`));
            await this.ioHost.notify((0, messages_1.info)(this.action, `${chalk.bold(stack.displayName)}: importing resources into stack...`));
            await this.performResourceMigration(migrateDeployment, resourcesToImport, options);
            fs.rmSync('migrate.json');
            await this.ioHost.notify((0, messages_1.info)(this.action, `${chalk.bold(stack.displayName)}: applying CDKMetadata and Outputs to stack (if applicable)...`));
        }
    }
    /**
     * Creates a new stack with just the resources to be migrated
     */
    async performResourceMigration(migrateDeployment, resourcesToImport, options) {
        const startDeployTime = new Date().getTime();
        let elapsedDeployTime = 0;
        // Initial Deployment
        await migrateDeployment.importResourcesFromMigrate(resourcesToImport, {
            roleArn: options.roleArn,
            deploymentMethod: options.deploymentMethod,
            usePreviousParameters: true,
            progress: options.progress,
            rollback: options.rollback,
        });
        elapsedDeployTime = new Date().getTime() - startDeployTime;
        await this.ioHost.notify((0, messages_1.info)(this.action, `'\nâœ¨  Resource migration time: ${(0, string_manipulation_1.formatTime)(elapsedDeployTime)}s\n'`, 'CDK_TOOLKIT_I5002', {
            duration: elapsedDeployTime,
        }));
    }
    async tryGetResources(environment) {
        try {
            const migrateFile = fs.readJsonSync('migrate.json', {
                encoding: 'utf-8',
            });
            const sourceEnv = migrateFile.Source.split(':');
            if (sourceEnv[0] === 'localfile' ||
                (sourceEnv[4] === environment.account && sourceEnv[3] === environment.region)) {
                return migrateFile.Resources;
            }
        }
        catch (e) {
            // Nothing to do
        }
        return undefined;
    }
}
exports.ResourceMigrator = ResourceMigrator;
//# sourceMappingURL=data:application/json;base64,