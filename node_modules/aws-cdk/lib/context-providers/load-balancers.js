"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancerListenerContextProviderPlugin = exports.LoadBalancerContextProviderPlugin = void 0;
const cx_api_1 = require("@aws-cdk/cx-api");
const sdk_provider_1 = require("../api/aws-auth/sdk-provider");
const error_1 = require("../toolkit/error");
/**
 * Provides load balancer context information.
 */
class LoadBalancerContextProviderPlugin {
    constructor(aws) {
        this.aws = aws;
    }
    async getValue(query) {
        var _a;
        if (!query.loadBalancerArn && !query.loadBalancerTags) {
            throw new error_1.ContextProviderError('The load balancer lookup query must specify either `loadBalancerArn` or `loadBalancerTags`');
        }
        const loadBalancer = await (await LoadBalancerProvider.getClient(this.aws, query)).getLoadBalancer();
        const ipAddressType = loadBalancer.IpAddressType === 'ipv4' ? cx_api_1.LoadBalancerIpAddressType.IPV4 : cx_api_1.LoadBalancerIpAddressType.DUAL_STACK;
        return {
            loadBalancerArn: loadBalancer.LoadBalancerArn,
            loadBalancerCanonicalHostedZoneId: loadBalancer.CanonicalHostedZoneId,
            loadBalancerDnsName: loadBalancer.DNSName,
            vpcId: loadBalancer.VpcId,
            securityGroupIds: (_a = loadBalancer.SecurityGroups) !== null && _a !== void 0 ? _a : [],
            ipAddressType: ipAddressType,
        };
    }
}
exports.LoadBalancerContextProviderPlugin = LoadBalancerContextProviderPlugin;
/**
 * Provides load balancer listener context information
 */
class LoadBalancerListenerContextProviderPlugin {
    constructor(aws) {
        this.aws = aws;
    }
    async getValue(query) {
        if (!query.listenerArn && !query.loadBalancerArn && !query.loadBalancerTags) {
            throw new error_1.ContextProviderError('The load balancer listener query must specify at least one of: `listenerArn`, `loadBalancerArn` or `loadBalancerTags`');
        }
        return (await LoadBalancerProvider.getClient(this.aws, query)).getListener();
    }
}
exports.LoadBalancerListenerContextProviderPlugin = LoadBalancerListenerContextProviderPlugin;
class LoadBalancerProvider {
    static async getClient(aws, query) {
        const client = (await (0, sdk_provider_1.initContextProviderSdk)(aws, query)).elbv2();
        try {
            const listener = query.listenerArn
                ? // Assert we're sure there's at least one so it throws if not
                    (await client.describeListeners({ ListenerArns: [query.listenerArn] })).Listeners[0]
                : undefined;
            return new LoadBalancerProvider(client, { ...query, loadBalancerArn: (listener === null || listener === void 0 ? void 0 : listener.LoadBalancerArn) || query.loadBalancerArn }, listener);
        }
        catch (err) {
            throw new error_1.ContextProviderError(`No load balancer listeners found matching arn ${query.listenerArn}`);
        }
    }
    constructor(client, filter, listener) {
        this.client = client;
        this.filter = filter;
        this.listener = listener;
    }
    async getLoadBalancer() {
        const loadBalancers = await this.getLoadBalancers();
        if (loadBalancers.length === 0) {
            throw new error_1.ContextProviderError(`No load balancers found matching ${JSON.stringify(this.filter)}`);
        }
        if (loadBalancers.length > 1) {
            throw new error_1.ContextProviderError(`Multiple load balancers found matching ${JSON.stringify(this.filter)} - please provide more specific criteria`);
        }
        return loadBalancers[0];
    }
    async getListener() {
        var _a;
        if (this.listener) {
            try {
                const loadBalancer = await this.getLoadBalancer();
                return {
                    listenerArn: this.listener.ListenerArn,
                    listenerPort: this.listener.Port,
                    securityGroupIds: loadBalancer.SecurityGroups || [],
                };
            }
            catch (err) {
                throw new error_1.ContextProviderError(`No associated load balancer found for listener arn ${this.filter.listenerArn}`);
            }
        }
        const loadBalancers = await this.getLoadBalancers();
        if (loadBalancers.length === 0) {
            throw new error_1.ContextProviderError(`No associated load balancers found for load balancer listener query ${JSON.stringify(this.filter)}`);
        }
        const listeners = (await this.getListenersForLoadBalancers(loadBalancers)).filter((listener) => {
            return ((!this.filter.listenerPort || listener.Port === this.filter.listenerPort) &&
                (!this.filter.listenerProtocol || listener.Protocol === this.filter.listenerProtocol));
        });
        if (listeners.length === 0) {
            throw new error_1.ContextProviderError(`No load balancer listeners found matching ${JSON.stringify(this.filter)}`);
        }
        if (listeners.length > 1) {
            throw new error_1.ContextProviderError(`Multiple load balancer listeners found matching ${JSON.stringify(this.filter)} - please provide more specific criteria`);
        }
        return {
            listenerArn: listeners[0].ListenerArn,
            listenerPort: listeners[0].Port,
            securityGroupIds: ((_a = loadBalancers.find((lb) => listeners[0].LoadBalancerArn === lb.LoadBalancerArn)) === null || _a === void 0 ? void 0 : _a.SecurityGroups) || [],
        };
    }
    async getLoadBalancers() {
        const loadBalancerArns = this.filter.loadBalancerArn ? [this.filter.loadBalancerArn] : undefined;
        const loadBalancers = (await this.client.paginateDescribeLoadBalancers({
            LoadBalancerArns: loadBalancerArns,
        })).filter((lb) => lb.Type === this.filter.loadBalancerType);
        return this.filterByTags(loadBalancers);
    }
    async filterByTags(loadBalancers) {
        if (!this.filter.loadBalancerTags) {
            return loadBalancers;
        }
        return (await this.describeTags(loadBalancers.map((lb) => lb.LoadBalancerArn)))
            .filter((tagDescription) => {
            // For every tag in the filter, there is some tag in the LB that matches it.
            // In other words, the set of tags in the filter is a subset of the set of tags in the LB.
            return this.filter.loadBalancerTags.every((filter) => {
                var _a;
                return (_a = tagDescription.Tags) === null || _a === void 0 ? void 0 : _a.some((tag) => filter.key === tag.Key && filter.value === tag.Value);
            });
        })
            .flatMap((tag) => loadBalancers.filter((loadBalancer) => tag.ResourceArn === loadBalancer.LoadBalancerArn));
    }
    /**
     * Returns tag descriptions associated with the resources. The API doesn't support
     * pagination, so this function breaks the resource list into chunks and issues
     * the appropriate requests.
     */
    async describeTags(resourceArns) {
        // Max of 20 resource arns per request.
        const chunkSize = 20;
        const tags = Array();
        for (let i = 0; i < resourceArns.length; i += chunkSize) {
            const chunk = resourceArns.slice(i, Math.min(i + chunkSize, resourceArns.length));
            const chunkTags = await this.client.describeTags({
                ResourceArns: chunk,
            });
            tags.push(...(chunkTags.TagDescriptions || []));
        }
        return tags;
    }
    async getListenersForLoadBalancers(loadBalancers) {
        const listeners = [];
        for (const loadBalancer of loadBalancers.map((lb) => lb.LoadBalancerArn)) {
            listeners.push(...(await this.client.paginateDescribeListeners({ LoadBalancerArn: loadBalancer })));
        }
        return listeners;
    }
}
//# sourceMappingURL=data:application/json;base64,