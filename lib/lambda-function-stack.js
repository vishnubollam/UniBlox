"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaInvokeStack = void 0;
const lambda = require("aws-cdk-lib/aws-lambda");
const apiGateway = require("aws-cdk-lib/aws-apigateway");
const iam = require("aws-cdk-lib/aws-iam");
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const path = require("path");
class LambdaInvokeStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const endpointName = aws_cdk_lib_1.Fn.importValue('SageMakerEndpointName');
        // Define Lambda function role
        const lambdaRole = new iam.Role(this, 'LambdaInvokeRole', {
            assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
            managedPolicies: [
                iam.ManagedPolicy.fromManagedPolicyArn(this, 'AmazonSageMakerFullAccess', 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'), //fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole'),
                iam.ManagedPolicy.fromManagedPolicyArn(this, 'AWSLambdaBasicExecutionRole', 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'), //fromAwsManagedPolicyName('service-role/AmazonSageMakerFullAccess')
            ]
        });
        // Define Lambda function that invokes the SageMaker endpoint with inline code
        const invokeModelLambda = new lambda.Function(this, 'InvokeModelFunction', {
            runtime: lambda.Runtime.NODEJS_18_X,
            handler: 'index.handler',
            code: lambda.Code.fromAsset(path.join(__dirname, 'services')), // Path to your Lambda code
            environment: {
                SAGEMAKER_ENDPOINT: endpointName,
            },
            role: lambdaRole
        });
        // Define API Gateway to invoke Lambda function
        const api = new apiGateway.RestApi(this, 'InvokeModelAPI');
        const lambdaIntegration = new apiGateway.LambdaIntegration(invokeModelLambda);
        api.root.addMethod('POST', lambdaIntegration); // POST method to trigger the model invocation 
    }
}
exports.LambdaInvokeStack = LambdaInvokeStack;
;
function join(__dirname, arg1, arg2) {
    throw new Error('Function not implemented.');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhLWZ1bmN0aW9uLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGFtYmRhLWZ1bmN0aW9uLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGlEQUFpRDtBQUNqRCx5REFBeUQ7QUFDekQsMkNBQTJDO0FBQzNDLG1DQUFrQztBQUNsQyw2Q0FBaUM7QUFDakMsNkJBQThCO0FBRTlCLE1BQWEsaUJBQWtCLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDaEQsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUF3RDtRQUM5RixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLFlBQVksR0FBRyxnQkFBRSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBRTdELDhCQUE4QjtRQUM5QixNQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFO1lBQzFELFNBQVMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFBc0IsQ0FBQztZQUMzRCxlQUFlLEVBQUU7Z0JBQ2IsR0FBRyxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBRSxJQUFJLEVBQUUsMkJBQTJCLEVBQUUsbURBQW1ELENBQUMsRUFBQyx1RUFBdUU7Z0JBQ3ZNLEdBQUcsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLDZCQUE2QixFQUFFLGtFQUFrRSxDQUFDLEVBQUMsb0VBQW9FO2FBQ3ZOO1NBQ0EsQ0FBQyxDQUFDO1FBRUgsOEVBQThFO1FBQzlFLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxxQkFBcUIsRUFBRTtZQUMzRSxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLE9BQU8sRUFBRSxlQUFlO1lBQ3RCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLDJCQUEyQjtZQUMzRixXQUFXLEVBQUU7Z0JBQ1Qsa0JBQWtCLEVBQUUsWUFBWTthQUNuQztZQUNELElBQUksRUFBRSxVQUFVO1NBQ2YsQ0FBQyxDQUFDO1FBRUgsK0NBQStDO1FBQy9DLE1BQU0sR0FBRyxHQUFHLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUMzRCxNQUFNLGlCQUFpQixHQUFHLElBQUksVUFBVSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDOUUsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQywrQ0FBK0M7SUFDOUYsQ0FBQztDQUNKO0FBL0JELDhDQStCQztBQUFBLENBQUM7QUFFRixTQUFTLElBQUksQ0FBQyxTQUFpQixFQUFFLElBQVksRUFBRSxJQUFZO0lBQ3ZELE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUNqRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSAnYXdzLWNkay1saWIvYXdzLWxhbWJkYSc7XG5pbXBvcnQgKiBhcyBhcGlHYXRld2F5IGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcGlnYXRld2F5JztcbmltcG9ydCAqIGFzIGlhbSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYidcbmltcG9ydCB7IEZuIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmV4cG9ydCBjbGFzcyBMYW1iZGFJbnZva2VTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG5jb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczp7IFNhZ2VNYWtlckVuZHBvaW50TmFtZTogc3RyaW5nIH0gJiBjZGsuU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3QgZW5kcG9pbnROYW1lID0gRm4uaW1wb3J0VmFsdWUoJ1NhZ2VNYWtlckVuZHBvaW50TmFtZScpO1xuXG4gICAgLy8gRGVmaW5lIExhbWJkYSBmdW5jdGlvbiByb2xlXG4gICAgY29uc3QgbGFtYmRhUm9sZSA9IG5ldyBpYW0uUm9sZSh0aGlzLCAnTGFtYmRhSW52b2tlUm9sZScsIHtcbiAgICBhc3N1bWVkQnk6IG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnbGFtYmRhLmFtYXpvbmF3cy5jb20nKSxcbiAgICBtYW5hZ2VkUG9saWNpZXM6IFtcbiAgICAgICAgaWFtLk1hbmFnZWRQb2xpY3kuZnJvbU1hbmFnZWRQb2xpY3lBcm4oIHRoaXMsICdBbWF6b25TYWdlTWFrZXJGdWxsQWNjZXNzJywgJ2Fybjphd3M6aWFtOjphd3M6cG9saWN5L0FtYXpvblNhZ2VNYWtlckZ1bGxBY2Nlc3MnKSwvL2Zyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZSgnc2VydmljZS1yb2xlL0FXU0xhbWJkYUJhc2ljRXhlY3V0aW9uUm9sZScpLFxuICAgICAgICBpYW0uTWFuYWdlZFBvbGljeS5mcm9tTWFuYWdlZFBvbGljeUFybih0aGlzLCAnQVdTTGFtYmRhQmFzaWNFeGVjdXRpb25Sb2xlJywgJ2Fybjphd3M6aWFtOjphd3M6cG9saWN5L3NlcnZpY2Utcm9sZS9BV1NMYW1iZGFCYXNpY0V4ZWN1dGlvblJvbGUnKSwvL2Zyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZSgnc2VydmljZS1yb2xlL0FtYXpvblNhZ2VNYWtlckZ1bGxBY2Nlc3MnKVxuICAgIF1cbiAgICB9KTtcblxuICAgIC8vIERlZmluZSBMYW1iZGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBTYWdlTWFrZXIgZW5kcG9pbnQgd2l0aCBpbmxpbmUgY29kZVxuICAgIGNvbnN0IGludm9rZU1vZGVsTGFtYmRhID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnSW52b2tlTW9kZWxGdW5jdGlvbicsIHtcbiAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMThfWCxcbiAgICBoYW5kbGVyOiAnaW5kZXguaGFuZGxlcicsXG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwnc2VydmljZXMnKSksIC8vIFBhdGggdG8geW91ciBMYW1iZGEgY29kZVxuICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIFNBR0VNQUtFUl9FTkRQT0lOVDogZW5kcG9pbnROYW1lICxcbiAgICB9LFxuICAgIHJvbGU6IGxhbWJkYVJvbGVcbiAgICB9KTtcblxuICAgIC8vIERlZmluZSBBUEkgR2F0ZXdheSB0byBpbnZva2UgTGFtYmRhIGZ1bmN0aW9uXG4gICAgY29uc3QgYXBpID0gbmV3IGFwaUdhdGV3YXkuUmVzdEFwaSh0aGlzLCAnSW52b2tlTW9kZWxBUEknKTtcbiAgICBjb25zdCBsYW1iZGFJbnRlZ3JhdGlvbiA9IG5ldyBhcGlHYXRld2F5LkxhbWJkYUludGVncmF0aW9uKGludm9rZU1vZGVsTGFtYmRhKTtcbiAgICBhcGkucm9vdC5hZGRNZXRob2QoJ1BPU1QnLCBsYW1iZGFJbnRlZ3JhdGlvbik7IC8vIFBPU1QgbWV0aG9kIHRvIHRyaWdnZXIgdGhlIG1vZGVsIGludm9jYXRpb24gXG4gICAgfVxufTtcblxuZnVuY3Rpb24gam9pbihfX2Rpcm5hbWU6IHN0cmluZywgYXJnMTogc3RyaW5nLCBhcmcyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb24gbm90IGltcGxlbWVudGVkLicpO1xufVxuIl19